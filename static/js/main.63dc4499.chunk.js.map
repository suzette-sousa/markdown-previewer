{"version":3,"sources":["components/Editor.js","components/Previewer.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Editor","id","className","onChange","this","props","handleChange","value","markdown","React","Component","Previewer","dangerouslySetInnerHTML","__html","convertedmarkdown","defaultMarkdown","App","state","marked","e","setState","target","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+PAaeA,G,6KATX,OACE,sBAAKC,GAAG,SAASC,UAAU,SAA3B,UACE,sBAAKA,UAAU,cAAf,UAA6B,wBAAQA,UAAU,UAAlB,4CAAyD,uGACtF,0BAAUA,UAAU,SAASC,SAAUC,KAAKC,MAAMC,aAAcC,MAAOH,KAAKC,MAAMG,kB,GALrEC,IAAMC,YCUZC,E,uKARX,OACE,qBAAKV,GAAG,UAAR,SACE,qBAAKC,UAAU,SAASU,wBAAyB,CAACC,OAAQT,KAAKC,MAAMS,2B,GAJrDL,IAAMC,W,gBCIxBK,EAAe,qlCAiHNC,E,4MAtBbC,MAAQ,CACNT,SAAUO,EACVD,kBAAmBI,IAAOH,I,EAG5BT,aAAe,SAACa,GACd,EAAKC,SAAU,CACbZ,SAAUW,EAAEE,OAAOd,MACnBO,kBAAmBI,IAAOC,EAAEE,OAAOd,U,uDAKrC,OACE,sBAAKL,UAAU,MAAf,UACE,cAAC,EAAD,CAAQI,aAAcF,KAAKE,aAAcE,SAAUJ,KAAKa,MAAMT,WAC9D,cAAC,EAAD,CAAWF,aAAcF,KAAKE,aAAcQ,kBAAmBV,KAAKa,MAAMH,2B,GAjBhEL,IAAMC,WCpFJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BtB,M","file":"static/js/main.63dc4499.chunk.js","sourcesContent":["import React from 'react';\n\nclass Editor extends React.Component {\n  render() {\n    return (\n      <div id=\"editor\" className=\"padd-2\">\n        <div className=\"editor-head\"><strong className=\"txt-upp\">• Editeur markdown •</strong><em>Editer le code ci-dessous et visualiser le code html correspondant</em></div>\n        <textarea className=\"padd-2\" onChange={this.props.handleChange} value={this.props.markdown} />\n      </div>\n    )\n  }\n}\n\nexport default Editor;\n","import React from 'react';\n\nclass Previewer extends React.Component {\n  render() {\n    return (\n      <div id=\"preview\">\n        <div className=\"padd-2\" dangerouslySetInnerHTML={{__html: this.props.convertedmarkdown}}></div>\n      </div>\n    )\n  }\n}\n\nexport default Previewer;\n","import React from 'react';\nimport './App.css';\nimport Editor from './components/Editor';\nimport Previewer from './components/Previewer';\nimport marked from 'marked';\n\nconst defaultMarkdown = `\n# Ma page HTML générée à partir du code markdown (titre niveau 1)\n\n___\n\n## Titres (niveau 2)\n\n<br>\n\n### Niveau 3\n#### Niveau 4\n##### Niveau 5\n###### Niveau 6\n\n<br>\n\n## Codes\n\n<br>\n\n\\`<div>Code sur une ligne</div>\\`\n\n<br>\n\n    const codeBlock = () => {\n        return \"Code sur plusieurs lignes\";\n    }\n\n<br>\n\n## Listes\n\n<br>\n\n1. Premier élément de liste\n2. Second élément de liste\n3. Troisième élément de liste\n    - Premier élément imbriqué\n    - Second élément imbriqué\n4. Quatrième élément de liste\n\n<br>\n\n## Citation\n\n<br>\n\n> blockquote\n\n<br>\n\n## Line break\n\n<br>\n\nParagraphe avec lignes séparés par un br  \n2 espaces à la fin de la ligne précédente  \n\n<br>\n\n## Apparence texte\n\n<br>\n\n**Texte en gras**\n\n<br>\n\n_Texte en italique_\n\n<br>\n\n## Image\n\n<br>\n\n![Logo React](https://cdn.iconscout.com/icon/free/png-256/logo-1889531-1597591.png)\n\n<br>\n\n## Lien\n\n<br>\n\n[Lien vers un guide markdown](https://www.markdownguide.org/basic-syntax/)\n\n***\n\n`\n\nclass App extends React.Component {\n  state = {\n    markdown: defaultMarkdown,\n    convertedmarkdown: marked(defaultMarkdown)\n  }\n\n  handleChange = (e) => {\n    this.setState ({\n      markdown: e.target.value,\n      convertedmarkdown: marked(e.target.value)\n    })\n  }\n  \n  render () {\n    return (\n      <div className=\"App\">\n        <Editor handleChange={this.handleChange} markdown={this.state.markdown} />\n        <Previewer handleChange={this.handleChange} convertedmarkdown={this.state.convertedmarkdown} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}